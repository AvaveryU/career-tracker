# Generated by Django 3.2.3 on 2023-10-20 22:20

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Электронная почта')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'Пользователь с таким именем уже существует.'}, max_length=150, unique=True, validators=[users.validators.validate_not_me, users.validators.UsernameValidator], verbose_name='Имя пользователя')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AcademicStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('passing', 'Проходит обучение'), ('academic_leave', 'Академический отпуск'), ('graduate', 'Выпускник'), ('expelled', 'Отчислен')], max_length=20, verbose_name='Учебный статус')),
            ],
        ),
        migrations.CreateModel(
            name='ContactInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=20, unique=True, verbose_name='Номер телефона')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='Адрес электронной почты')),
                ('telegram_login', models.CharField(blank=True, max_length=100, null=True, verbose_name='Логин в Telegram')),
            ],
        ),
        migrations.CreateModel(
            name='EmploymentStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('job_search', 'Ищу работу'), ('employed', 'Трудоустроен'), ('internship_search', 'В поиске стажировки'), ('other', 'Другое')], max_length=20, verbose_name='Статус трудоустройства')),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Навык')),
            ],
        ),
        migrations.CreateModel(
            name='StudentUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('education_level', models.CharField(blank=True, max_length=100, null=True, verbose_name='Уровень образования')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Город')),
                ('specialization', models.CharField(blank=True, max_length=100, null=True, verbose_name='Специализация')),
                ('work_experience', models.CharField(blank=True, max_length=100, null=True, verbose_name='Опыт работы')),
                ('grade', models.CharField(blank=True, choices=[('junior', 'Junior'), ('middle', 'Middle')], max_length=20, null=True, verbose_name='Грэйд')),
                ('academic_status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.academicstatus', verbose_name='Учебный статус')),
                ('contact_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='users.contactinfo', verbose_name='Контактная информация')),
                ('employment_status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.employmentstatus', verbose_name='Статус трудоустройства')),
                ('skills', models.ManyToManyField(blank=True, related_name='students', to='users.Skill', verbose_name='Навыки')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_info', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('username', 'email'), name='unique_username_email'),
        ),
    ]
